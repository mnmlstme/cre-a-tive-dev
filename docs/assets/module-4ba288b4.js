console.log('Loading module "Kram_e2bdb492_WebComponents"');function g({connectStore:r,initializeStore:i}){class c extends HTMLElement{constructor(){super();let e=document.getElementById("hello-world-template").content;this.attachShadow({mode:"open"}).appendChild(e.cloneNode(!0))}}customElements.define("hello-world",c);class m extends HTMLElement{constructor(){super();let e=document.getElementById("hello-style-template").content;this.attachShadow({mode:"open"}).appendChild(e.cloneNode(!0))}}customElements.define("hello-style",m);class d extends HTMLElement{constructor(){super();let e=document.getElementById("greet-world-template").content;this.attachShadow({mode:"open"}).appendChild(e.cloneNode(!0))}}customElements.define("greet-world",d);class s extends HTMLElement{static get observedAttributes(){return["heading"]}constructor(){super();let e=document.getElementById("arrow-button-template").content;this.attachShadow({mode:"open"}).appendChild(e.cloneNode(!0))}connectedCallback(){const e=this.getAttribute("heading");e&&this._updateRotation(e)}attributeChangedCallback(e,l,p){e==="heading"&&this._updateRotation(p)}_updateRotation(e){this.shadowRoot.firstElementChild.style.setProperty("--arrow-rotation",e)}}customElements.define("arrow-button",s);class t extends HTMLElement{constructor(){super();let e=document.getElementById("dropdown-menu-template").content;this.attachShadow({mode:"open"}).appendChild(e.cloneNode(!0)),this.isShownInput=this.shadowRoot.getElementById("is-shown"),this.clickawayHandler=l=>{l.composedPath().includes(this)?l.stopPropagation():this.toggle(!1)},this.isShownInput.addEventListener("change",()=>this.toggleClickAway(this.isShownInput.checked))}toggle(e){this.isShownInput.checked=e,this.toggleClickAway(e)}toggleClickAway(e){e?document.addEventListener("click",this.clickawayHandler):document.removeEventListener("click",this.clickawayHandler)}}customElements.define("dropdown-menu",t);class o extends HTMLElement{constructor(){super();let e=document.getElementById("dropdown-base-template").content;this.attachShadow({mode:"open"}).appendChild(e.cloneNode(!0)),this.isShownInput=this.shadowRoot.getElementById("is-shown"),this.clickawayHandler=l=>{l.composedPath().includes(this)?l.stopPropagation():this.toggle(!1)},this.isShownInput.addEventListener("change",()=>this.toggleClickAway(this.isShownInput.checked))}toggle(e){this.isShownInput.checked=e,this.toggleClickAway(e)}toggleClickAway(e){e?document.addEventListener("click",this.clickawayHandler):document.removeEventListener("click",this.clickawayHandler)}}customElements.define("dropdown-base",o);class a extends HTMLElement{constructor(){super();let e=document.getElementById("command-menu-template").content;this.attachShadow({mode:"open"}).appendChild(e.cloneNode(!0))}}class h extends HTMLElement{constructor(){super();let e=document.getElementById("command-group-template").content;this.attachShadow({mode:"open"}).appendChild(e.cloneNode(!0))}}customElements.define("command-menu",a),customElements.define("command-group",h);class u extends HTMLElement{constructor(){super();let e=document.getElementById("action-item-template").content;this.attachShadow({mode:"open"}).appendChild(e.cloneNode(!0))}}return customElements.define("action-item",u),{}}function w(r,i){let c={root:Object.assign({},i)};const d=g({connectStore:(s=["root"])=>{let t=c;return s.forEach(o=>t=t[o]),{root:t,get:o=>t[o],set:(o,a)=>t[o]=a,keys:()=>Object.keys(t)}}});return(s,t)=>{d[s-1].call(t)}}export{g as Program,w as mount};
